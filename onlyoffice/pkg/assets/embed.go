// Code generated by fileb0x at "2020-11-15 20:52:21.021714 +0100 CET m=+0.002632274" from config file "embed.yml" DO NOT EDIT.
// modification hash(5979fa40094391f869b75d179bb1a848.8058aec596c5fb73022d09bb97af796e)

package assets

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileOnlyofficeJs is "onlyoffice.js"
var FileOnlyofficeJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x91\xc1\x4a\x24\x31\x10\x86\xef\xfb\x14\x4d\x98\x43\x07\x32\x33\xf7\x0c\xb3\x7b\x58\x58\x98\xc3\xee\x8a\xe8\x49\xc4\x89\xc9\xdf\x4c\xb0\xbb\x2a\x24\x69\xbb\x25\xe4\xdd\x65\x50\x5a\xc5\x17\xd0\xe3\x07\x45\xd5\xf7\x51\x0e\x9d\x27\xb4\x6d\x37\x92\xcd\x9e\xa9\x95\x45\x8c\x09\x4d\xca\xd1\xdb\x2c\x76\x11\x79\x8c\xd4\xbc\x8e\x15\x13\xc2\x81\x3a\xd6\x85\xcc\x00\x2d\xd8\xfa\xb4\x66\xea\x9f\xb8\xeb\xbc\x85\x50\xde\x69\xf1\x81\x2d\x93\x16\xf3\xfa\x85\xd7\x8e\xed\x38\x80\xb2\x50\x98\x33\x28\x79\xa6\xa4\x6f\xca\x02\x5a\x38\xb6\xb3\x50\x27\x43\xae\x47\xd4\x8b\x15\x14\x29\x96\x65\xf2\xe4\x78\xda\x70\x00\xb5\xc7\x55\xc1\x26\x21\x3e\x22\xd6\xad\x09\x21\x6d\xdf\x0e\x6f\x57\x85\xeb\xaf\xce\xf7\xb8\x30\xf9\xb4\x5f\x15\x90\x65\x87\xeb\xcb\xc3\x6f\x1e\x02\x13\x28\xb7\x24\xeb\x51\x89\xbb\xfb\xde\xd0\x83\x90\x55\x11\xa6\x3f\xbe\xc7\x5f\xd0\xa8\xcb\x00\x1a\xaf\x7c\xee\xa1\xb1\xff\x89\x56\xfc\xc3\xd4\xfc\x5f\xd6\x37\x4b\x87\xac\x55\xbd\xd7\x9f\xfb\x39\x7d\x7d\xfd\x14\x22\x8c\x4b\x27\xe0\x73\x41\x08\xf9\x1b\x3c\x20\x44\x24\x50\x36\x67\xb7\x73\xc2\x6d\xad\xb2\x4a\xb9\xfb\xf1\x1c\x00\x00\xff\xff\x56\x2c\xf6\x8a\xd0\x02\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileOnlyofficeJs)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "onlyoffice.js", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
